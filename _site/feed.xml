<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>l.g</title>
    <description>Hello, my Name is LucasGatsas. I&#39;m a Designer &amp; Front-End Engineer based in the City of Saint Gall, Switzerland. And this is my GitHub Contributions - Repositories - Public Activity Site!</description>
    <link>https://spaceg.github.io/</link>
    <atom:link href="https://spaceg.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 28 Mar 2015 02:06:10 +0100</pubDate>
    <lastBuildDate>Sat, 28 Mar 2015 02:06:10 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Mac Os X - CommandLines</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt; Mac Os X - CommandLines&lt;/strong&gt; &lt;/h2&gt;

&lt;table class=&quot;table&quot;&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;Kommando#&lt;/th&gt;
            &lt;th&gt;Aktion&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ chflags nohidden ~/Library&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Library-Ordner unter Mac OS Lion anzeigen&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ ping 127.0.0.1&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;pingt ein Netzwerkgerät
um unter Mac OS Ping zu stoppen CTRL+C drücken&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ top&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Zeigt eine Liste von laufenden Prozessen an, ähnlich der Aktivitätsanzeige.&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ defaults write com.apple.
            	Finder AppleShowAllFiles TRUE; killAll Finder&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Zeigt versteckte Dateien im Finder an.&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ defaults write com.apple.
            	Finder AppleShowAllFiles TRUE; 
            	killAll Finder&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Zeigt &lt;strong&gt;versteckte Dateien&lt;/strong&gt; im &lt;a href=&quot;https://spaceg.github.io/&quot; title=&quot;Mac Explorer - Finder&quot;&gt;Finder&lt;/a&gt; an. &lt;span title=&quot;eingeführt in OS X Lion&quot; class=&quot;label label-info&quot;&gt;Mavericks&lt;/span&gt;&lt;/td&gt;          &lt;/tr&gt;
    	&lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ defaults write  com.apple.
            	ScreenCapture type JPG; 
            	killAll SystemUIServer&lt;/code&gt; &lt;/td&gt;
            &lt;td&gt;Stellt das Format für Screenshots auf JPG, weitere mögliche Formate sind: PNG, PDF, TIFF, JPEG, BMP, GIF, PSD.&lt;/td&gt;
          &lt;/tr&gt;
           &lt;td&gt;&lt;code&gt;$ defaults write 
           	com.apple.Screencapture location 
           	/Users/benutzername; 
           	killAll SystemUIServer&lt;/code&gt;
           &lt;/td&gt;
            &lt;td&gt;Ändert den Speicherordner für Screenshots auf Euren Benutzerordner.&lt;/td&gt;
          
           &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ dscacheutil -flushcache&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Startet Quick Look neu &amp;amp; läd ggf. neue Plugins.&lt;/td&gt;
          &lt;/tr&gt;
               &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ ipconfig getifaddr en0&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Get Your Network IP Address&lt;/td&gt;
          &lt;/tr&gt;
           &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ curl ipecho.net/plain;
             echo&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Get Your External IP Address&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code&gt;$ ping -c 10 www.example-
            	site.com&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Test Network Connectivity&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

&lt;blockquote&gt;
	&quot;Learn how Machine Works!&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 29 Mar 2015 16:00:44 +0200</pubDate>
        <link>https://spaceg.github.io/2015/03/29/mac-osx-commands-terminal-front/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/29/mac-osx-commands-terminal-front/</guid>
        
        
      </item>
    
      <item>
        <title>Raspberry Pi 2 Model B - Quadcore, 1GB RAM</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt; Raspberry Pi 2 Model B&lt;/strong&gt; &lt;/h2&gt;

&lt;blockquote&gt;
	&quot;Learn how Machine Works!&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 28 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/28/raspberry-pi-2-model-b-quadcore-1gb-ram%20Kopie/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/28/raspberry-pi-2-model-b-quadcore-1gb-ram%20Kopie/</guid>
        
        
      </item>
    
      <item>
        <title>Node.js - New Javascript</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt; Node.js on OSX 10.9 Mavericks&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;(1.)&lt;strong&gt; Xcode.&lt;/strong&gt; Apple’s XCode development software is used to build Mac and iOS apps, but it also includes the tools you need to compile software for use on your Mac. XCode is free and you can find it in the Apple App Store.&lt;/p&gt;

&lt;p&gt;(2.) &lt;strong&gt; Homebrew &lt;/strong&gt;. Homebrew is a package manager for the Mac — it makes installing most open source sofware (like Node) as simple as writing brew install node. You can learn more about &lt;strong&gt; &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;  &lt;/strong&gt;
at the Homebrew website. To install Homebrew just open Terminal and type &lt;code&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/
Homebrew/install/master/install)&quot; &lt;/code&gt;. You’ll see messages in the Terminal explaining what you need to do to complete the installation process.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Installation&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;(1.)  &lt;strong&gt; Open the Terminal app &lt;/strong&gt; and type &lt;code&gt; brew install node. &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2.) &lt;strong&gt; Sit back and wait. &lt;/strong&gt; Homebrew downloads some files and installs them. And that’s it.&lt;/p&gt;

&lt;p&gt;To make sure you have Node and NPM installed, run two simple commands to see what version of each is installed:&lt;/p&gt;

&lt;p&gt;To see if Node is installed, type &lt;code&gt; node -v &lt;/code&gt; in Terminal. This should print the version number so you’ll see something like this &lt;code&gt; V0.12.1 &lt;/code&gt;
To see if NPM is installed, type &lt;code&gt; npm -v &lt;/code&gt; in Terminal. This should print the version number so you’ll see something like this &lt;code&gt;  V0.12.1 &lt;/code&gt; &lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;How to Update Node and NPM&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;New versions of Node and NPM come out frequently. You can use Homebrew to update the software it installs.&lt;/p&gt;

&lt;p&gt;(1.) Make sure Homebrew has the latest version of the Node package. In Terminal type &lt;code&gt; brew update &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2.) Upgrade Node: &lt;code&gt; brew upgrade node &lt;/code&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;How to Uninstall Node and NPM&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;You can use Homebrew to uninstall packages that it installed: &lt;code&gt; brew uninstall node &lt;/code&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Clone it From GitHub&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt; Mac &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re using the excellent homebrew package manager, you can install node with one command: brew install node.&lt;/p&gt;

&lt;p&gt;Otherwise, follow the below steps:&lt;/p&gt;

&lt;p&gt;(1.) Install Xcode.&lt;/p&gt;

&lt;p&gt;(2.) Install git.&lt;/p&gt;

&lt;p&gt;Run the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git clone git://github.com/ry/node.git &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt; &lt;a href=&quot;https://github.com/joyent/node&quot;&gt;https://github.com/joyent/node&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; ./configure &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; make &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; sudo make install &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Download: node.js ! &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/download/&quot;&gt;Download node.js&lt;/a&gt;  &lt;/p&gt;

&lt;blockquote&gt;


&quot;Node.js is an open source, cross-platform runtime environment for server-side and networking applications.&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 27 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/27/node.js-v0.12.1/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/27/node.js-v0.12.1/</guid>
        
        
      </item>
    
      <item>
        <title>Get Xcode without Appstore</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt; The Strange Apple-iD for the Interface Appstore&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;I have an old email in appstore and i can’t change it in the user Interface App from Apple the (AppStore). Because i have resolved my Host last year in July 2014. - Now, i need some Xcode Tools for dev my Web Application. I’ve been trying for Hours to Hack my Apple ID. ;)&lt;/p&gt;

&lt;p&gt;Download: Xcode - @ Apple Developer! &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/downloads/index.action&quot;&gt;Download Xcode 6.2 (6C131e)&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/xcode-kkk1.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then install it ! :) &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/xcode-kkk5.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/xcode-kkk2.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
	&quot;We don&#39;t like the AppStore! We want the Old Software Update and Upgrade Back!&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 26 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/26/xcode-without-appstore/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/26/xcode-without-appstore/</guid>
        
        
      </item>
    
      <item>
        <title>sudoers file - Add Premission to any User</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Sudoers&lt;/strong&gt; &lt;/h2&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Add a User to Sudoers in Mac OS X&lt;/h2&gt;

&lt;p&gt;(1.) Launch Terminal : type : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo visudo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(2.) Change your User Privilege specification&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# User privilege specification &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;root	ALL=(ALL) ALL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%admin	ALL=(ALL) ALL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(3.) Add Below the User Privilege specification &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
youradminusername ALL=(ALL) ALL
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;See The Blue Marked Window in the Terminal : &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/sudoerspic.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(4.)  Now press “ESC” (escape) key to stop editing the file&lt;/p&gt;

&lt;p&gt;(5.) Enter the : key (colon) and then type &lt;code&gt;“wq”&lt;/code&gt; followed by the Return key to save changes and &lt;code&gt; exit vi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to the Finder:  Do you can find the file in the phat &lt;code&gt;etc/sudoers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(1.) Open it with right Mouse Click and « Open with other » &lt;/p&gt;

&lt;p&gt;(2.) the Finder Menu will Open &lt;/p&gt;

&lt;p&gt;(3.) Open with enable  « All Applications » with your Text Editor&lt;/p&gt;

&lt;p&gt;(4.) After changes Save the File. Enter ! :)&lt;/p&gt;

&lt;blockquote&gt;
	&quot;Open Terminal and do Funny Things! :) &quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/24/user-is-not-in-the-sudoers-file-this-incident-will-be-reported%20Kopie/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/24/user-is-not-in-the-sudoers-file-this-incident-will-be-reported%20Kopie/</guid>
        
        
      </item>
    
      <item>
        <title>Ready For MacPorts</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;MacPorts&lt;/strong&gt; &lt;/h2&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;2.2.1. OS X Package Install&lt;/h2&gt;

&lt;p&gt;The OS X package installer automatically installs MacPorts, &lt;a href=&quot;https://guide.macports.org/chunked/installing.shell.html&quot;&gt;sets the shell environment&lt;/a&gt;, and runs a
&lt;a href=&quot;https://guide.macports.org/chunked/using.html#using.port.selfupdate&quot;&gt;selfupdate&lt;/a&gt;  operation to update the ports tree and MacPorts base with the latest release.&lt;/p&gt;

&lt;p&gt;(1.) Download the latest &lt;strong&gt;MacPorts-2.3.1-….pkg&lt;/strong&gt; installer from the &lt;strong&gt; &lt;a href=&quot;https://distfiles.macports.org/MacPorts/&quot;&gt;MacPorts download directory&lt;/a&gt; &lt;/strong&gt; . Here are direct links for the latest versions of OS X:&lt;/p&gt;

&lt;p&gt;OS X 10.9 Mavericks:
&lt;a href=&quot;https://distfiles.macports.org/MacPorts/MacPorts-2.3.1-10.9-Mavericks.pkg&quot;&gt;MacPorts-2.3.1-10.9-Mavericks.pkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OS X 10.8 Mountain Lion:
&lt;a href=&quot;https://distfiles.macports.org/MacPorts/MacPorts-2.3.1-10.8-MountainLion.pkg&quot;&gt;MacPorts-2.3.1-10.8-MountainLion.pkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OS X 10.7 Lion:
&lt;a href=&quot;https://distfiles.macports.org/MacPorts/MacPorts-2.3.1-10.7-Lion.pkg&quot;&gt;MacPorts-2.3.1-10.7-Lion.pkg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(2.) Double-click the downloaded package installer to perform the default “easy” install.&lt;/p&gt;

&lt;p&gt;(3.) After this step you are done already, MacPorts is now installed and your shell environment was set up automatically by the installer. To confirm the installation is working as expected, now try using the port command in a new terminal window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ port version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version: 2.3.1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In case of problems such as “command not found”, make sure that you opened a new terminal window or consult Section 2.5, &lt;a href=&quot;https://guide.macports.org/chunked/installing.shell.html&quot;&gt; “MacPorts and the Shell”&lt;/a&gt; . Otherwise, please skip the remainder of this chapter and continue with &lt;a href=&quot;https://guide.macports.org/chunked/using.html&quot;&gt;Chapter 3, Using MacPorts&lt;/a&gt; in this guide.&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;2.2.2. Source Install&lt;/strong&gt; &lt;/h2&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Install Macports via Terminal&lt;/h2&gt;

&lt;p&gt;If you installed MacPorts using the package installer, skip this section. To install MacPorts from the source code, follow the steps below.&lt;/p&gt;

&lt;p&gt;(1.) Download and extract the &lt;a href=&quot;https://distfiles.macports.org/MacPorts/MacPorts-2.3.1.tar.bz2&quot;&gt;MacPorts 2.3.1 tarball&lt;/a&gt;. Either do so using your browser and the Finder, or use the given commands in a terminal window.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ curl -O https://distfiles.macports.org/
	MacPorts/MacPorts-2.3.1.tar.bz2&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ tar xf MacPorts-2.3.1.tar.bz2&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;(2.) Afterwards, perform the commands shown in the terminal window. If you wish to use a path other than &lt;code&gt;/opt/local&lt;/code&gt;, follow the instructions for installing multiple copies of MacPorts instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd MacPorts-2.3.1/&lt;/code&gt; 
&lt;code&gt;$ ./configure&lt;/code&gt; 
&lt;code&gt;$ make&lt;/code&gt; 
&lt;code&gt;$ sudo make install&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://plus.google.com/u/0/101826267816845608605/posts/Lit9AU1msaY&quot;&gt;GO SEE MacPorts-2.3.3 INSTALL VIDEO&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;515&quot; src=&quot;https://www.youtube.com/embed/RBriCmHGrXk?autoplay=1&amp;amp;loop=1&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;(3.) Please continue with  &lt;a href=&quot;https://guide.macports.org/chunked/installing.macports.html#installing.macports.source.multiple&quot;&gt;Section 2.5, “MacPorts and the Shell”&lt;/a&gt;  to set up your shell environment.&lt;/p&gt;

&lt;p&gt;install macports &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port version&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port list&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port search git&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port info git-core&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port installed&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo install git-core&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git —version&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port installed&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;port outdated&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port upgrade&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port upgrade git-core&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port upgrade outdated&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port selfupdate&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port uninstall git-core&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo port install git-core&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.macports.org/install.php&quot;&gt;MacPorts Website&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
	&quot;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/23/ready-for-macports/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/23/ready-for-macports/</guid>
        
        
      </item>
    
      <item>
        <title>emacs</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;emacs&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;MacPorts&lt;/p&gt;

&lt;p&gt;If you have MacPorts installed, you can just do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo port install emacs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to install Emacs 24. The MacPorts installer updates your PATH environment variable, so the MacPorts build of Emacs should be found by your shell before the (outdated) build that comes with Mac OS when you type &lt;strong&gt;‘emacs’&lt;/strong&gt;. If you prefer the Emacs.app build, that’s available by executing:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo port install emacs-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/emacs1.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My Screenshot&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/emacs-screeshot.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/emacs3.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update Post soon!&lt;/p&gt;

&lt;blockquote&gt;
	&quot;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 22 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/22/get-emacs-on-your-machine/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/22/get-emacs-on-your-machine/</guid>
        
        
      </item>
    
      <item>
        <title>Sails.js - Remote Work</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Remote your Web App&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;Get Sails.js and build awesome WebApps. This is my Introduction for work Remote on GitHub or Servers!
More to read soon!  &lt;/p&gt;

&lt;p&gt;Download : &lt;a href=&quot;https://github.com/balderdashy/sails&quot;&gt;sails.js&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Website :  &lt;a href=&quot;http://sailsjs.org/#!/documentation/concepts/Assets&quot;&gt;sails.js&lt;/a&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Install on OSX&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;Download &amp;amp; Using a &lt;a href=&quot;https://nodejs.org/download/&quot;&gt;package:&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/Homebrew/homebrew&quot;&gt;homebrew: &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Install Brew :  &lt;code&gt; brew install node &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using macPorts : &lt;a href=&quot;https://www.macports.org/&quot;&gt;macports: &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt; port install nodejs   &lt;/code&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Sails.js with Git&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;&lt;code&gt; git pull origin master &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; sudo npm update &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sails lift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add -A &lt;/code&gt;-&amp;gt; add all unstaged files to the stagin area
&lt;code&gt;git commit -m &lt;/code&gt; “Short description of your commit” -&amp;gt; &lt;code&gt; Commit &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the files from the staging area to the head of your local branch&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout  {Branch Name} &lt;/code&gt; 
to check where you are -&amp;gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt; git status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;if you want to push -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt; git push origin {Branch Name} &lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
	&quot;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 21 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/21/work-with-sails-js-on-github/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/21/work-with-sails-js-on-github/</guid>
        
        
      </item>
    
      <item>
        <title>Git Introduction</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Git CommandLines&lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; is a free software for distributed version control of files that were originally developed for source control of the Linux kernel.&lt;/p&gt;

&lt;p&gt;(1.) Go Download Git &lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;Git&lt;/a&gt; I’m also a Mac/Unix &amp;amp; Linux User. But this install and Workflow is for Mac Os X. Do you can Download it directly from &lt;a href=&quot;http://sourceforge.net/projects/git-osx-installer/files/git-2.2.1-intel-universal-mavericks.dmg/download?use_mirror=autoselect&quot;&gt;sourceforge.net&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;(2.)
Open the pkg File with Doppleclick : &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/git-sourceforge.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(3.)
Open Terminal : then type : which git &lt;/p&gt;

&lt;p&gt;(4.)
Type : git  –version&lt;/p&gt;

&lt;p&gt;(5.)
Type: git config -l&lt;/p&gt;

&lt;p&gt;(6.)
Type: git config –global user.name “[yourusername]”&lt;/p&gt;

&lt;p&gt;(7.)
Type: git config –global user.email “[youruseremail@mail.io]”&lt;/p&gt;

&lt;p&gt;(8.)
Type: git config -l &lt;/p&gt;

&lt;p&gt;(9.)
Then do you will see your user &amp;amp; email which one do you have set up right now!&lt;/p&gt;

&lt;p&gt;exmaple &lt;/p&gt;

&lt;p&gt;&lt;code&gt; user.name=[yourusernamewillshowuphere]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;user.email=[youruseremailwillshowuphere]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Have fun with Git! 
Below do you will see some Git CommandLines &lt;/p&gt;

&lt;p&gt;&lt;br /&gt; &lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;strong&gt;Git Terminology:&lt;/strong&gt;&lt;br /&gt;
&lt;table class=&quot;table table-responsive&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
master
&lt;/td&gt;
&lt;td&gt;
default branch we develop in
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
origin
&lt;/td&gt;
&lt;td&gt;
default upstream repo (Github)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
HEAD
&lt;/td&gt;
&lt;td&gt;
current branch
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
remote
&lt;/td&gt;
&lt;td&gt;
repository stored on another computer
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
staging (adding)
&lt;/td&gt;
&lt;td&gt;
adding changed files to index tree to be committed
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Here’s a good &lt;a href=&quot;http://stackoverflow.com/questions/7076164/terminology-used-by-git&quot; target=&quot;_blank&quot; class=&quot;alert-link&quot;&gt;glossary&lt;/a&gt; of definitions.
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#starting-a-repo-init/clone/remote&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Starting a Repo &lt;small&gt;init/clone/remote&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
	git init
	&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Create a repo from existing data
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git clone (repo_url)
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Clone a current repo (into a folder with same name as repo)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git clone (repo_url) (folder_name)
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Clone a repo into a specific folder name
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git clone (repo_url) .
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;

Clone a repo into current directory (should be an empty directory)

&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;code&gt;
git remote add origin 
	https://github.com/
	username/
	(repo_name).git
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Create a remote repo named origin pointing at your Github repo (after you’ve already created the repo on Github) (used if you git init since the repo you created locally isn’t linked to a remote repo yet)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;code&gt;
git remote add 
	origin git@github.com:
	username/
	(repo_name).git
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Create a remote repo named origin pointing at your Github repo (using SSH url instead of HTTP url)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git remote
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Show the names of the remote repositories you’ve set up
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;

git remote -v
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Show the names and URLs of the remote repositories
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;

git remote rm 
	(remote_name)
	&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Remove a remote repository
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;code&gt;

git remote set-url 
	origin (git_url)
	&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Change the URL of the git repo
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;

git push
&lt;/code&gt;

&lt;/td&gt;
&lt;td&gt;
Push your changes to the origin
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#showing-changes-status/diff/log/blame&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Showing Changes &lt;small&gt;status/diff/log/blame&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git status
&lt;/code&gt;
&lt;/td&gt;


&lt;td&gt;
Show the files changed
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git diff
&lt;/code&gt;
&lt;/td&gt;



&lt;td&gt;
Show changes to files compared to last commit
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git diff (filename)
&lt;/code&gt;
&lt;/td&gt;


&lt;td&gt;
Show changes in single file compared to last commit
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;

	&lt;code&gt;
git diff (commit_id)
&lt;/code&gt;
&lt;/td&gt;


&lt;td&gt;
Show changes between two different commits.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git log
&lt;/code&gt;
&lt;/td&gt;


&lt;td&gt;
Show history of changes
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git blame (filename)
&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Show who changed each line of a file and when
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;strong&gt;Commit ID:&lt;/strong&gt; This can be that giant long SHA-1 hash. You can call it many different ways. I usually just use the &lt;strong&gt;first 4 characters&lt;/strong&gt; of the hash.
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#undoing-changes-reset/revert&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Undoing Changes &lt;small&gt;reset/revert&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git reset –hard
&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Go back to the last commit (will not delete new unstaged files)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git revert HEAD
&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Undo/revert last commit AND create a new commit
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
	&lt;code&gt;
git revert (commit_id)
&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Undo/revert a specific commit AND create a new commit
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#staging-files-add/rm&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Staging Files &lt;small&gt;add/rm&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git add -A&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Stage all files (new, modified, and deleted)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git add .&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Stage new and modified files (not deleted)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git add -u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Stage modified and deleted files (not new)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git rm (filename)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Remove a file and untrack it
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git rm (filename) –cached&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Untrack a file only. It will still exist. Usually you will add this file to .gitignore after rm
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;strong&gt;Git Workflow Trees:&lt;/strong&gt; How adding and committing moves files between the different git trees.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table class=&quot;table table-responsive&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
Working Tree
&lt;/td&gt;
&lt;td&gt;
The “tree” that holds all our current files.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
Index (after adding/staging file)
&lt;/td&gt;
&lt;td&gt;
The “staging” area that holds files that need to be committed.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
HEAD
&lt;/td&gt;
&lt;td&gt;
Tree that represents the last commit.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#publishing-commit/stash/push&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Publishing &lt;small&gt;commit/stash/push&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git commit -m “message”&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Commit the local changes that were staged
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git commit -am “message”&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Stage files (modified and deleted, not new) and commit
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git stash&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Take the uncommitted work (modified tracked files and staged changes) and saves it
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git stash list&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Show list of stashes
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git stash apply&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Reapply the latest stashed contents
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git stash apply (stash_id)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Reapply a specific stash. (stash id = &lt;strong&gt;stash@{2})&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git stash drop (stash_id)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Drop a specific stash
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git push&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Push your changes to the origin
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git push origin (local_branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Push a branch to the origin
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git tag (tag_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Tag a version (ie v1.0). Useful for Github releases.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#updating-and-getting-code-fetch/pull&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Updating and Getting Code &lt;small&gt;fetch/pull&lt;/small&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git fetch&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Get the latest changes from origin (don’t merge)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git pull&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Get the latest changes from origin AND merge
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git checkout -b (new_branch_name) origin/(branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Get a remote branch from origin into a local branch (naming the branch and switching to it)
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#branching-branch/checkout&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Branching &lt;small&gt;branch/checkout&lt;/small&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git branch&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Show all branches (local)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git branch -a&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Show all branches (local and remote)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git branch (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Create a branch from HEAD
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git checkout -b (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Create a new branch and switch to it
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git checkout (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Switch to an already created branch
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git push origin (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Push a branch up to the origin (Github)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git checkout -b (new_branch_name) origin/(branch_name)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
Get a remote branch from origin into a local branch (naming the branch and switching to it)
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;
git push origin –delete (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Delete a branch locally and remotely
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;&lt;a href=&quot;#integrating-branches-merge/rebase&quot;&gt;&lt;span class=&quot;heading-link ti-link&quot;&gt;&lt;/span&gt; Integrating Branches &lt;small&gt;merge/rebase&lt;/small&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/h2&gt;

&lt;table class=&quot;table table-responsive table-hover&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;git checkout master &lt;/code&gt; &lt;br /&gt; &lt;code&gt;git merge (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Merge a specific branch into the master branch.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;git rebase (branch_name)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Take all the changes in one branch and replay them on another. Usually used in a feature branch. Rebase the master to the feature branch so you are testing your feature on the latest main code base. Then merge to the master.
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;git cherry-pick (commit_id)&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;
Merge just &lt;strong&gt;one specific commit&lt;/strong&gt; from another branch to your current branch.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;strong&gt;Merging:&lt;/strong&gt; Merging will occur &lt;strong&gt;FROM&lt;/strong&gt; the branch you name &lt;strong&gt;TO&lt;/strong&gt; the branch you are &lt;em&gt;currently&lt;/em&gt; in. &lt;strong&gt;Rebasing:&lt;/strong&gt; Usually switch to a feature branch (&lt;code&gt;git checkout newFeature&lt;/code&gt;). Then rebase (&lt;code&gt;git rebase master&lt;/code&gt;). Then merge back so you have all the changes of master and the feature branch (&lt;code&gt;git checkout master&lt;/code&gt;, and &lt;code&gt;git merge newFeature&lt;/code&gt;).
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/p0198vg4.jpg&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Image : Building Of The Trojan Horse Giovanni Domenico Tiepolo&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
	&quot;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&quot;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 20 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/20/git-install/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/20/git-install/</guid>
        
        
      </item>
    
      <item>
        <title>RaspberryPI Modell B</title>
        <description>&lt;h2 class=&quot;section-heading&quot;&gt;&lt;strong&gt;Get Some Raspberrys! &lt;/strong&gt; &lt;/h2&gt;

&lt;p&gt;Update Post soon! &lt;/p&gt;

&lt;!--

&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/raspberry_pi_mechanicalspecB_.png&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot;&gt;
&lt;/a&gt;

&lt;br&gt; 





&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/bbcm_27.jpg&quot; alt=&quot;Post Sample Image&quot; style=&quot;width:100%&quot;&gt;
&lt;/a&gt;


--&gt;

&lt;blockquote&gt;
	
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 15:00:44 +0100</pubDate>
        <link>https://spaceg.github.io/2015/03/19/Raspberry-Pi-Modell-B/</link>
        <guid isPermaLink="true">https://spaceg.github.io/2015/03/19/Raspberry-Pi-Modell-B/</guid>
        
        
      </item>
    
  </channel>
</rss>
