<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lucas Gatsas</title>
    <description>I'm a Ui/Ux Designer &amp; Front End Engineer</description>
    <link>http://localhost:4000</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Salt + Hash Password Generator</title>
        
        
          <description>&lt;h2 id=&quot;this-post-is-the-last-of-a-series-of-posts-in-which-i-write-about-the-observable-type-in-the-first-post-we-went-ahead-writing-an-observable-from-scratch-in-order-to-fully-understand-it-we-then-explored-how-to-create-observables-from-values-arrays-dom-events-and-promises-this-time-well-focus-on-compositions-by-rewriting-some-basic-composition-operators&quot;&gt;This practice gonna be to the Salt and Hash Generator in Node.js! I will example you, how to code this Script. So let's Start it. Now, first of all, we need to Install already Node.js on our Machine. &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot; target=&quot;_blank&quot;&gt;wiki/Salt_(cryptography)&lt;/a&gt; Then, we create a foler like &lt;code&gt;SaltHash&lt;/code&gt; Then we open  that Folder with our Terminal. &lt;a href=&quot;https://en.wikipedia.org/wiki/Npm_(software)&quot; target=&quot;_blank&quot;&gt;Create your Npm_(software) package.json file with our dependencies for the Node.js Modules. &lt;/a&gt;. Okey, let's downlaod the Module &lt;code&gt;crypto&lt;/code&gt; with &lt;code&gt;npm install crypto &lt;/code&gt; packages. The JavaScript implementations of Standard and Secure Cryptographic Algorithms.&lt;/h2&gt;

</description>
        
        <pubDate>Thu, 06 Jul 2017 10:18:00 +0000</pubDate>
        <link>http://localhost:4000/2017/salt-hash-password-generator/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/salt-hash-password-generator/</guid>
      </item>
    
      <item>
        <title>OpenSSL</title>
        
        
          <description>&lt;h2 class=&quot;section-heading&quot;&gt;OpenSSL&lt;/h2&gt;
&lt;h2 class=&quot;section-heading&quot;&gt;Install Transport Layer Security - Secure Sockets Layer (SSL)&lt;/h2&gt;

</description>
        
        <pubDate>Mon, 18 May 2015 06:18:00 +0000</pubDate>
        <link>http://localhost:4000/2015/open-ssl/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/open-ssl/</guid>
      </item>
    
      <item>
        <title>Unix Commandlines</title>
        
        
          <description>&lt;h2 id=&quot;this-post-is-the-last-of-a-series-of-posts-in-which-i-write-about-the-observable-type-in-the-first-post-we-went-ahead-writing-an-observable-from-scratch-in-order-to-fully-understand-it-we-then-explored-how-to-create-observables-from-values-arrays-dom-events-and-promises-this-time-well-focus-on-compositions-by-rewriting-some-basic-composition-operators&quot;&gt;In This Post, i do list some powerfull commandlines for mac os series. &lt;a href=&quot;https://ss64.com/osx/&quot; target=&quot;_blank&quot;&gt;ss64.com/osx/&lt;/a&gt; in order to fully understand it. We then explored how to &lt;a href=&quot;https://developer.apple.com/library/content/documentation/OpenSource/Conceptual/ShellScripting/shell_scripts/shell_scripts.html&quot; target=&quot;_blank&quot;&gt;create bash scripts from values, arrays, dom events and promises&lt;/a&gt;. This time weâ€™ll focus on compositions by standart powerfull mac osx commandlines.&lt;/h2&gt;

</description>
        
        <pubDate>Wed, 10 Nov 2010 10:18:00 +0000</pubDate>
        <link>http://localhost:4000/2010/commandlines/</link>
        <guid isPermaLink="true">http://localhost:4000/2010/commandlines/</guid>
      </item>
    
      <item>
        <title>Hello World</title>
        
        
          <description>&lt;p&gt;This is my first  &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt;  Post!&lt;/p&gt;

</description>
        
        <pubDate>Mon, 01 Feb 2010 06:18:00 +0000</pubDate>
        <link>http://localhost:4000/2010/hello-world/</link>
        <guid isPermaLink="true">http://localhost:4000/2010/hello-world/</guid>
      </item>
    
  </channel>
</rss>